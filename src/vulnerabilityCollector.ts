import { ILibraryPath, INode, IVulnerabilities } from "./interfaces";

export class VulnerabilityCollector {
  public collect(nodes: INode[]): IVulnerabilities {
    const vulnerabilities: IVulnerabilities = {};
    this.collectInternal(nodes, vulnerabilities);
    return vulnerabilities;
  }

  private collectInternal(nodes: INode[], vulnerabilities: IVulnerabilities, parents: INode[] = []) {
    for (const node of nodes) {
      const pathToRoot = [node, ...parents];
      if (node.vulnerabilities.length) {
        for (const vul of node.vulnerabilities) {
          const key = vul.cve ?? vul.cwe ?? vul.url ?? vul.title;
          if (!vulnerabilities[key]) {
            vulnerabilities[key] = {
              key,
              vulnerability: vul,
              usedBy: [],
            };
          }
          this.addToUseByUniquely(
            vulnerabilities[key].usedBy,
            pathToRoot.map((n) => n.library + ":" + n.version)
          );
        }
      }
      if (node.childNodes.length) {
        this.collectInternal(node.childNodes, vulnerabilities, pathToRoot);
      }
    }
  }

  private addToUseByUniquely(usedBy: ILibraryPath[], newPath: string[]) {
    const usedStrings = usedBy.map((u) => u.join("|"));
    if (!usedStrings.includes(newPath.join("|"))) {
      usedBy.push(newPath);
    }
  }
}
