import { INode } from "./interfaces";

/**
 * Returns only "includes", remove "excludes" and list nodes with no vulnerabilities
 */
export class Filter {
  public filter(nodes: INode[], include: RegExp[], exclude: RegExp[]): INode[] {
    const matchedNodes: INode[] = include.length === 0 ? [...nodes] : [];
    if (include.length > 0) {
      // Add only matched nodes
      for (const node of nodes) {
        if (this.matchPattern(node, include)) {
          matchedNodes.push(node);
        } else {
          node.childNodes = this.filter(node.childNodes, include, []);
          if (node.childNodes.length > 0) {
            matchedNodes.push(node);
          }
        }
      }
    }

    // Remove excludes from result
    const resultNodes: INode[] = [];
    for (const node of matchedNodes) {
      if (!this.matchPattern(node, exclude)) {
        node.childNodes = this.filter(node.childNodes, [], exclude);
        if (node.childNodes.length > 0 || node.vulnerabilities.length > 0) {
          resultNodes.push(node);
        }
      }
    }
    return resultNodes;
  }

  private matchPattern(node: INode, includeRegExpList: RegExp[]): boolean {
    for (const include of includeRegExpList) {
      if (node.library.match(include)) {
        return true;
      }
    }
    return false;
  }
}
