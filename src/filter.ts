import { INode } from "./interfaces";

export class Filter {
  public filter(nodes: INode[], include: RegExp[], exclude: RegExp[]): INode[] {
    const matchedNodes: INode[] = [];
    if (include.length === 0) {
      // Add all nodes to results
      for (const node of nodes) {
        matchedNodes.push(node);
      }
    } else {
      // Add only matched nodes
      this.searchForLibraries(nodes, matchedNodes, include);
    }
    // Remove excludes from result
    const resultNodes: INode[] = [];
    for (const node of matchedNodes) {
      if (!this.matchPattern(node, exclude)) {
        resultNodes.push(node);
        node.childNodes = this.filter(node.childNodes, [], exclude);
      }
    }
    return resultNodes;
  }

  private searchForLibraries(nodes: INode[], newNodes: INode[], includeRegExpList: RegExp[]) {
    for (const node of nodes) {
      if (this.matchPattern(node, includeRegExpList)) {
        newNodes.push(node);
      } else if (node.childNodes.length) {
        this.searchForLibraries(node.childNodes, newNodes, includeRegExpList);
      }
    }
  }

  private matchPattern(node: INode, includeRegExpList: RegExp[]): boolean {
    for (const include of includeRegExpList) {
      if (node.library.match(include)) {
        return true;
      }
    }
    return false;
  }
}
