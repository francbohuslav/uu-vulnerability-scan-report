import core from "./core";
import { ICommandOptions, IConsole, IVulnerableOccurrence, WhiteListTypeEnum } from "./interfaces";
import { SonatypeParser } from "./sonatypeParser";
import { UuFilter } from "./uuFilter";
import { VulnerabilityCollector } from "./vulnerabilityCollector";

export class VulnerabilityScan {
  constructor(private options: ICommandOptions, private console: IConsole) {}

  public run() {
    if (this.options.uu === WhiteListTypeEnum.exceptUu) {
      this.console.log("UU libraries will be skipped.");
    } else if (this.options.uu === WhiteListTypeEnum.onlyUu) {
      this.console.log("Only UU libraries will be analysed.");
    }
    const parser = new SonatypeParser(console);
    const topNodes = parser.parse(this.options.sourceReport);

    const uuFilter = new UuFilter();
    const filteredNodes = uuFilter.filter(topNodes, this.options.uu);

    const collector = new VulnerabilityCollector();
    const vulnerabilities = collector.collect(filteredNodes);

    const report = JSON.stringify(vulnerabilities, null, 2);
    if (this.options.outputFile) {
      core.writeTextFile(this.options.outputFile, report);
      this.console.log("Vulnerability tree exported to " + this.options.outputFile);
    }

    if (this.options.teamcity) {
      Object.values(vulnerabilities).forEach((v) => this.reportToTeamcity(v));
    } else {
      this.console.log(report);
    }
  }

  private reportToTeamcity(occ: IVulnerableOccurrence) {
    const vul = occ.vulnerability;
    const stepTcName = this.teamCityEscape(vul.title);
    this.console.log(`##teamcity[testStarted name='${stepTcName}']`);
    this.console.log(`##teamcity[testFailed name='${stepTcName}' message='${this.teamCityEscape(vul.title)}']`);
    if (vul.cve) {
      this.console.log(`##teamcity[testMetadata testName='${stepTcName}' name='cve' value='${this.teamCityEscape(vul.cve)}']`);
    }
    if (vul.cwe) {
      this.console.log(`##teamcity[testMetadata testName='${stepTcName}' name='cwe' value='${this.teamCityEscape(vul.cwe)}']`);
    }
    this.console.log(`##teamcity[testMetadata testName='${stepTcName}' name='importance' value='${this.teamCityEscape(vul.importance)}']`);
    this.console.log(`##teamcity[testMetadata testName='${stepTcName}' name='url' type='link' value='${this.teamCityEscape(vul.url)}']`);

    if (occ.usedBy.length) {
      occ.usedBy.forEach((libraries, i) =>
        this.console.log(`##teamcity[testMetadata testName='${stepTcName}' name='usedBy-${i}' value='${this.teamCityEscape(libraries.join(", "))}']`)
      );
    }
    this.console.log(`##teamcity[testFinished name='${stepTcName}']`);
  }

  private teamCityEscape(text: string): string {
    return text.replace(/\|/g, "||").replace(/'/g, "|'").replace(/\r/g, "|r").replace(/\n/g, "|n").replace(/\]/g, "|]").replace(/\[/g, "|[");
  }
}
