import { join } from "path";
import core from "./core";
import { IVulnerabilities, IVulnerableOccurrence } from "./interfaces";

export class UuStringReport {
  public getUuString(vulnerabilities: IVulnerabilities): string {
    const template = core.readTextFile(join(__dirname, "../templates/uuString-complete.txt"));
    const templateVul = core.readTextFile(join(__dirname, "../templates/uuString-vulnerability.txt"));

    const tilesLines: string[][] = [];
    Object.values(vulnerabilities).forEach((record) => {
      const vul = record.vulnerability;
      const cveInDesc = vul.title.match(/\[(CVE-.*?)\] (CWE-\d)/);
      // const usedBy = record.usedBy
      //   .map((usage) => usage.filter((u) => !u.includes("uu_energygateway_")))
      //   .map((usage) => (usage.length > 1 ? usage[0] + " injected by " + usage[usage.length - 1] : usage[0]));

      const cve = vul.cve ?? cveInDesc?.[1];
      const cwe = vul.cwe ?? cveInDesc?.[2];
      const usedBy = record.usedBy.map((u) => u.filter((u2) => !u2.includes("uu_energygateway_"))[0]);
      usedBy.sort();
      tilesLines.push([
        `<uu5string />${[...new Set(usedBy)].join("<br />")}`,
        `<uu5string />${cve}<br />${cwe}<br />${vul.importance}`,
        `<uu5string />${vul.title}`,
        `<uu5string /><UU5.Bricks.Label>In analysis</UU5.Bricks.Label>`,
      ]);
    });

    tilesLines.sort((a, b) => a[0].localeCompare(b[0]) || a[1].localeCompare(b[1]));
    const vulStrings: string[] = [];
    Object.values(vulnerabilities).forEach((record) => {
      vulStrings.push(this.getVulnerabilityString(templateVul, record));
    });

    let content = template; //.replace("{{project}}", project);
    content = content.replace("{{table}}", JSON.stringify(tilesLines, null, 2).replace(/'/g, "\\'")).replace("{{vulnerabilities}}", vulStrings.join("\n"));
    return content;
  }

  private getVulnerabilityString(templateVul: string, vulnerability: IVulnerableOccurrence): string {
    templateVul = templateVul.replace("{{CVE}}", `${vulnerability.vulnerability.cve} / ${vulnerability.vulnerability.cwe}`);
    templateVul = templateVul.replace("{{importance}}", vulnerability.vulnerability.importance);
    templateVul = templateVul.replace("{{desc}}", vulnerability.vulnerability.title);

    const usedBy: string[] = [];
    for (const usedByItem of vulnerability.usedBy) {
      if (usedByItem.length > 1) {
        const libs = `<UU5.Bricks.Li>${usedByItem.slice(1).join("</UU5.Bricks.Li><UU5.Bricks.Li>")}</UU5.Bricks.Li>`;
        usedBy.push(`<UU5.Bricks.Li>${usedByItem[0]} used by...<UU5.Bricks.Ul>{${libs}</UU5.Bricks.Ul></UU5.Bricks.Li>`);
      } else {
        usedBy.push(`<UU5.Bricks.Li>${usedByItem[0]}</UU5.Bricks.Li>`);
      }
    }
    templateVul = templateVul.replace("{{usedBy}}", usedBy.join(""));
    return templateVul;
  }
}
