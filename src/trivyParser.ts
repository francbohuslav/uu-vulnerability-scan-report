import core from "./core";
import { DependenciesParser } from "./dependenciesParser";
import { ICommandOptions, IConsole, INode, IParser, IVulnerability } from "./interfaces";

export class TrivyParser implements IParser {
  constructor(private console: IConsole) {}

  public parse(options: ICommandOptions): INode[] {
    const treeList = new DependenciesParser(this.console).parse(options.dependencies ?? "");
    const report = JSON.parse(core.readTextFile(options.sourceReport)) as ITrivy$Root;
    if (report.Results?.[0]?.Vulnerabilities?.length > 0) {
      const vulnerabilitiesPerLibrary = this.createVulnerabilities(report.Results[0].Vulnerabilities);
      this.setVulnerabilityToNodes(treeList, vulnerabilitiesPerLibrary);
    }
    // core.writeTextFile("../test.json", JSON.stringify(treeList, null, 2));
    return treeList;
  }

  private createVulnerabilities(vulnerabilityInput: ITrivy$Vulnerability[]): Map<string, IPackageVulnerabilities> {
    const vulPerPackage = new Map<string, IPackageVulnerabilities>();
    for (const tVulnerability of vulnerabilityInput) {
      const vulnerability: IVulnerability = {
        importance: tVulnerability.Severity,
        title: tVulnerability.Description?.trim(),
        url: tVulnerability.PrimaryURL,
        cve: tVulnerability.VulnerabilityID,
        cwe: (tVulnerability.CweIDs ?? []).join(", "),
      };
      const match = tVulnerability.PkgIdentifier.PURL.match(/^pkg:maven\/([^/]+)\/([^/]+@.+)$/);
      if (match) {
        const key = `${match[1]}:${match[2]}`;
        if (vulPerPackage.has(key)) {
          vulPerPackage.get(key)!.vulnerabilities.push(vulnerability);
        } else {
          vulPerPackage.set(key, { vulnerabilities: [vulnerability], used: 0 });
        }
      } else {
        this.console.error(`Package id '${tVulnerability.PkgIdentifier.PURL}' does not match pattern pkg:maven/com.rabbitmq/amqp-client@5.13.1"`);
      }
    }
    return vulPerPackage;
  }

  private setVulnerabilityToNodes(treeList: INode[], vulnerabilitiesPerLibrary: Map<string, IPackageVulnerabilities>) {
    for (const tree of treeList) {
      const vulnerabilityList = vulnerabilitiesPerLibrary.get(tree.library + "@" + tree.version);
      if (vulnerabilityList) {
        tree.vulnerabilities = vulnerabilityList.vulnerabilities;
        vulnerabilityList.used++;
      }
      if (tree.childNodes.length > 0) {
        this.setVulnerabilityToNodes(tree.childNodes, vulnerabilitiesPerLibrary);
      }
    }
  }
}

export interface ITrivy$Root {
  SchemaVersion: number;
  CreatedAt: string;
  ArtifactName: string;
  ArtifactType: string;
  Metadata: ITrivy$Metadata;
  Results: ITrivy$Result[];
}

export interface ITrivy$Metadata {
  ImageConfig: ITrivy$ImageConfig;
}

export interface ITrivy$ImageConfig {
  architecture: string;
  created: string;
  os: string;
  rootfs: ITrivy$Rootfs;
  config: ITrivy$Config;
}

export interface ITrivy$Rootfs {
  type: string;
  diff_ids: any;
}

export interface ITrivy$Config {}

export interface ITrivy$Result {
  Target: string;
  Class: string;
  Type: string;
  Vulnerabilities: ITrivy$Vulnerability[];
}

export interface ITrivy$Vulnerability {
  VulnerabilityID: string;
  PkgName: string;
  PkgPath: string;
  PkgIdentifier: ITrivy$PkgIdentifier;
  InstalledVersion: string;
  FixedVersion?: string;
  Status: string;
  Layer: ITrivy$Layer;
  SeveritySource: string;
  PrimaryURL: string;
  DataSource: ITrivy$DataSource;
  Title: string;
  Description: string;
  Severity: string;
  CweIDs?: string[];
  VendorSeverity: ITrivy$VendorSeverity;
  CVSS?: ITrivy$Cvss;
  References: string[];
  PublishedDate: string;
  LastModifiedDate: string;
}

export interface ITrivy$PkgIdentifier {
  PURL: string;
  UID: string;
}

export interface ITrivy$Layer {}

export interface ITrivy$DataSource {
  ID: string;
  Name: string;
  URL: string;
}

export interface ITrivy$VendorSeverity {
  ghsa: number;
  nvd?: number;
  redhat?: number;
  ubuntu?: number;
  amazon?: number;
  "cbl-mariner"?: number;
  bitnami?: number;
  photon?: number;
  alma?: number;
  "oracle-oval"?: number;
  rocky?: number;
  azure?: number;
}

export interface ITrivy$Cvss {
  ghsa?: ITrivy$Ghsa;
  nvd?: ITrivy$Nvd;
  redhat?: ITrivy$Redhat;
  bitnami?: ITrivy$Bitnami;
}

export interface ITrivy$Ghsa {
  V3Vector: string;
  V3Score: number;
}

export interface ITrivy$Nvd {
  V3Vector: string;
  V3Score: number;
  V2Vector?: string;
  V2Score?: number;
}

export interface ITrivy$Redhat {
  V3Vector: string;
  V3Score: number;
  V2Vector?: string;
  V2Score?: number;
}

export interface ITrivy$Bitnami {
  V3Vector: string;
  V3Score: number;
}

interface IPackageVulnerabilities {
  used: number;
  vulnerabilities: IVulnerability[];
}
