import { join } from "path";
import core from "./core";
import { INode } from "./interfaces";

export class UuDirectReport {
  public getUuString(topNodes: INode[], projectName: string, projectInternalList: string[]): string {
    const template = core.readTextFile(join(__dirname, "../templates/uuString-direct.txt"));
    const projectInternalRegs = projectInternalList.map((i) => new RegExp(i));

    const libMap = new Map<string, INode>();
    this.addTopDependencies(topNodes, libMap, projectInternalRegs);

    const tilesLines: string[][] = [];
    const libs = libMap.values();
    for (const node of libs) {
      tilesLines.push([`<uu5string />${node.library}`, `<uu5string />${node.version}`, `<uu5string />${projectName}`, `<uu5string />`]);
    }
    tilesLines.sort((a, b) => a[0].localeCompare(b[0]) || a[1].localeCompare(b[1]));

    let content = template;
    content = content.replace("{{table}}", JSON.stringify(tilesLines, null, 2).replace(/'/g, "\\'"));
    return content;
  }

  private addTopDependencies(nodes: INode[], libMap: Map<string, INode>, projectInternalRegs: RegExp[]) {
    for (const node of nodes) {
      if (libMap.has(node.library)) {
        continue;
      }
      if (node.library.startsWith("project ")) {
        this.addTopDependencies(node.childNodes, libMap, projectInternalRegs);
        continue;
      }
      if (this.isInternalProject(projectInternalRegs, node)) {
        continue;
      }
      libMap.set(node.library, node);
    }
  }

  private isInternalProject(projectInternalRegs: RegExp[], node: INode) {
    for (const regexp of projectInternalRegs) {
      if (node.library.match(regexp)) {
        return true;
      }
    }
    return false;
  }
}
