import { INode, WhiteListTypeEnum } from "../src/interfaces";
import { UuFilter } from "../src/uuFilter";

let nodes: INode[] = [];
beforeEach(() => {
  nodes = [
    {
      library: "org.apache.camel:camel-core",
      childNodes: [
        {
          library: "org.apache.camel:camel-bean",
          childNodes: [],
          level: 2,
          version: "3.11.1",
          vulnerabilities: [],
        },
      ],
      level: 1,
      version: "3.11.1",
      vulnerabilities: [],
    },
    {
      library: "Enelane",
      childNodes: [
        {
          library: "uu.appg01:uu_appg01_server",
          childNodes: [],
          level: 2,
          version: "5.2.1",
          vulnerabilities: [],
        },
      ],
      level: 1,
      version: "5.0.4-SNPSHOT",
      vulnerabilities: [],
    },
    {
      library: "uu.appg01:uu_appg01_auditlog",
      childNodes: [],
      level: 1,
      version: "5.2.1",
      vulnerabilities: [],
    },
  ];
});
describe(`UU filter`, () => {
  test(`No filter`, () => {
    const filter = new UuFilter();
    const result = filter.filter(nodes, WhiteListTypeEnum.all);
    expect(result).toHaveLength(3);
    expect(result[1].childNodes).toHaveLength(1);
    expect(result).toMatchSnapshot();
  });

  test(`No UU`, () => {
    const filter = new UuFilter();
    const result = filter.filter(nodes, WhiteListTypeEnum.exceptUu);
    expect(result).toHaveLength(2);
    expect(result[1].childNodes).toHaveLength(0);
    expect(result).toMatchSnapshot();
  });

  test(`Only UU`, () => {
    const filter = new UuFilter();
    const result = filter.filter(nodes, WhiteListTypeEnum.onlyUu);
    expect(result).toHaveLength(2);
    for (const node of result) {
      expect(node.library.startsWith("uu.appg01:")).toBeTruthy();
    }
    expect(result).toMatchSnapshot();
  });
});
